h1. Dockerfiles for elexis

Here you find a few dockerfiles which you might find interesting for playing around with docker to simplify the setup for the various elements.

Consult the readme.textile in each subdirectory you are intersted in. Their purpose are

* build_elexis:  Complete environment, which lets you build and run the unit test for elexis-3-core and elexis-3-base
* elexis3factory: Simple One-Step factory for elexis-3-core and elexis-3-base without testing.
* elexis_test: Run the elexis-3-core + base with a demoDB, ch.elexis.base.ch.feature and some commonly used
* jenkins: Run the Jenkins-CI with the same sets of plugins as under https://jenkins.elexis.info/jenkins/
* mediawiki: Run a mediawiki enviroment (at the moment ahead of the actual wiki.elexis.info)
* nginx: The nginx server needed for the mediawiki PHP5 with FPM
* srv.elexis.info: Upcoming, my plans for using docker on srv.elexis.info (after upgrading it to jessie and making it work). A simple docker-compose.yml

h2. Requirement

A running docker installation with a quite recent docker version (I am running 1.6.2 at the moment).

Support for older docker version is no priority for me, but patches to support them would probably considered.

I try to base my dockerfiles on Debian:jessie

h3. Running tests under MacOSX

Searching around in the web I found via "Tim Sutton":http://kartoza.com/how-to-run-a-linux-gui-application-on-osx-using-docker/ and "Jan":http://learning-continuous-deployment.github.io/docker/images/dockerfile/2015/04/22/docker-gui-osx/ that you can run a tradition Linux X base application given:

* brew install socat
* install XQuartz
* @open -a XQuartz@
* @socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\"@
* Change the @-e DISPLAY@ option of docker run used in the host scripts, e.g. build_elexis/build_elexis, to @-e DISPLAY=<your-host-ip-address>:0@
* You can only use directories starting /Users as docker data containers

Tested with build_elexis on MacOSX 10.9 (at least 10.8 is required)
_Note:_ These steps are not necessary for build-only without unit tests (as in elexis3factory)

h3. Remove dangling docker files

Docker can consume a lot of space on your disk. Here some hints how you can clean it up


* http://blog.yohanliyanage.com/2015/05/docker-clean-up-after-yourself/

Recommend adding an /etc/cron.daily/docker_cleanup having the following content. Code lives at https://github.com/chadoe/docker-cleanup-volumes

bc. #!/bin/bash
# Source from http://blog.yohanliyanage.com/2015/05/docker-clean-up-after-yourself/
du -sh /var/lib/docker/
docker rm -v $(docker ps -a -q -f status=exited)
docker rmi $(docker images -f "dangling=true" -q)
docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes
du -sh /var/lib/docker/

h2. Contributing

* Fork the project
* Commit your changes
* create a pull request

